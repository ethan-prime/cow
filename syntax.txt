<term> ::= <identifier> | <int_literal> | 'input' | 'random' | <bool> | <real_literal> | <str_literal> | <array_access> | <function_call>
<bool> ::= 'true' | 'false'
<expr> ::= <term> | <term> <arithmetic_op> <term>
<arithmetic_op> ::= '+' | '-' | '*' | '/' | '**' | '%' | '>>'
<comparison> ::= <term> <comparison_op> <term>
<comparison_op> ::= '<' | '>' | '=='
<type> ::= 'int' | 'double' | 'bool'?
<declaration> ::= <type> ['!'] <identifier> [= <expr>] | <array_declaration> 
<array_declaration> ::= <type>... <identifier> '[' <int_literal> ']'
<array_access> ::= <identifier> '[' <expr> ']'
<assignment> ::= <identifier> [ '[' <expr> ']' ] = <expr>
<if_then> ::= 'if' <comparison> 'then' '{' [<statement>]* '}'
<while_loop> ::= 'while' <comparison> 'do' '{' [<statement>]* '}'
<for_loop> ::= 'for' <declaration> ',' <comparison> ',' <assignment> 'do' '{' [<statement>]* '}' 
<statement> ::= <assignment> | 'print' ('moo') <term> | <label> | <while_loop> | <if_then> | 'break' | <function_definition>
<argument> ::= <type> <identifier>
<function_definition> ::= 'define' <identifier> [':' <argument>*] '->' <type> '{' 
    [<statement]* '->' <expr> '}'
<function_call> ::= '#' <identifier> '(' [<expr>]* ')' 
<program> ::= <statement> [<statement>]*